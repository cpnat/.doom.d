:PROPERTIES:
:ID:            5042acad-84eb-43b4-b3ef-a378ff8964d5
:header-args:   jupyter-python :session py :kernel python3
:END:
#+title: Notebook Template

* Setup

#+begin_src elisp
;;(shell-command-to-string "jupyter kernelspec list")
#+end_src

#+RESULTS:

#+begin_src jupyter-python
import datetime
import sys
from typing import Any, List

import numpy as np
import pandas as pd
import plotly.express as px
from dotenv import dotenv_values
from IPython.display import Image
from plotly.graph_objs._figure import Figure
#+end_src

#+RESULTS:

#+begin_src jupyter-python
#sys.executable
#+end_src

#+RESULTS:

* Utils

#+begin_src jupyter-python
def df_to_org(df: pd.DataFrame) -> List[List[Any]]:
    """
    Convert a Pandas DataFrame to a data structure that can be used by org table
    """
    # return tabulate(df, headers=df.columns, tablefmt="orgtbl")

    def convert_timestamp_to_iso(timestamp):
        if isinstance(timestamp, pd.Timestamp):
            return timestamp.isoformat()
        else:
            return timestamp

    df = df.map(convert_timestamp_to_iso)

    return [list(df)] + df.values.tolist()

#+end_src

#+RESULTS:

#+begin_src jupyter-python
def render_plotly(fig: Figure) -> Image:
    """
    Render plotly figure as a static PNG. Requires kaleido.
    """
    img_bytes = fig.to_image(format="png")
    return Image(img_bytes)

#+end_src

#+RESULTS:

* Code

#+begin_src jupyter-python
df = pd.DataFrame({
    'A' : ['spam', 'eggs', 'spam', 'eggs'] * 6,
    'B' : ['alpha', 'beta', 'gamma'] * 8,
    'C' : [np.random.choice(pd.date_range(datetime.datetime(2013,1,1),datetime.datetime(2013,1,3))) for i in range(24)],
    'D' : np.random.randn(24),
    'E' : np.random.randint(2,10,24),
    'F' : [np.random.choice(['rand_1', 'rand_2', 'rand_4', 'rand_6']) for i in range(24)],
})
#+end_src

#+RESULTS:

#+begin_src jupyter-python
df_to_org(df)
#+end_src

#+RESULTS:
| A    | B     | C                   |                    D | E | F      |
| spam | alpha | 2013-01-01T00:00:00 |   1.0231301686951708 | 9 | rand_1 |
| eggs | beta  | 2013-01-02T00:00:00 |  -0.9441552282861644 | 5 | rand_6 |
| spam | gamma | 2013-01-01T00:00:00 |   0.6115576903890946 | 8 | rand_1 |
| eggs | alpha | 2013-01-01T00:00:00 |   0.1533036743725717 | 5 | rand_6 |
| spam | beta  | 2013-01-02T00:00:00 |  -0.2979530647017609 | 3 | rand_1 |
| eggs | gamma | 2013-01-03T00:00:00 |  -0.8389441398364055 | 2 | rand_1 |
| spam | alpha | 2013-01-03T00:00:00 |  -0.5166593849642958 | 2 | rand_4 |
| eggs | beta  | 2013-01-01T00:00:00 |  -0.8058512007912383 | 5 | rand_4 |
| spam | gamma | 2013-01-01T00:00:00 |   1.5562264132467933 | 3 | rand_4 |
| eggs | alpha | 2013-01-03T00:00:00 |   0.2092942552592275 | 5 | rand_1 |
| spam | beta  | 2013-01-01T00:00:00 |   1.2152583106839152 | 2 | rand_1 |
| eggs | gamma | 2013-01-03T00:00:00 |   0.3486471312514142 | 8 | rand_6 |
| spam | alpha | 2013-01-03T00:00:00 |   0.7295868403216973 | 2 | rand_6 |
| eggs | beta  | 2013-01-01T00:00:00 |     0.90198521142405 | 6 | rand_6 |
| spam | gamma | 2013-01-02T00:00:00 | -0.10896458796573702 | 2 | rand_2 |
| eggs | alpha | 2013-01-02T00:00:00 |  0.26908805189833257 | 7 | rand_6 |
| spam | beta  | 2013-01-02T00:00:00 |  0.25767660107043777 | 2 | rand_6 |
| eggs | gamma | 2013-01-01T00:00:00 | -0.37975251865370235 | 9 | rand_6 |
| spam | alpha | 2013-01-01T00:00:00 |   0.2656266680099025 | 4 | rand_2 |
| eggs | beta  | 2013-01-03T00:00:00 |  0.07488151499888039 | 9 | rand_2 |
| spam | gamma | 2013-01-01T00:00:00 |   1.3260375769877455 | 4 | rand_4 |
| eggs | alpha | 2013-01-02T00:00:00 |  0.13004034322088304 | 2 | rand_4 |
| spam | beta  | 2013-01-01T00:00:00 |  -1.6785175867623445 | 4 | rand_2 |
| eggs | gamma | 2013-01-01T00:00:00 |  -0.6010027083615306 | 2 | rand_2 |

#+begin_src jupyter-python
fig = px.line(df[["E"]], template="plotly_dark")
render_plotly(fig)
#+end_src

#+RESULTS:
[[./.ob-jupyter/dac6f7240c3ffb8265e2eefae1badc2ed61f2c5b.png]]
